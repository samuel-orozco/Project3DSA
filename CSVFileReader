#include <iostream>
#include <fstream>
#include <sstream>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

struct Node {
	string county;
	string state;
	string date;
	int fips;
	int cases;
	int deaths;

	Node* left = nullptr;
	Node* right = nullptr;
	Node() : county(""), state(""), date(""), fips(0), cases(0), deaths(0), BF(0), left(nullptr), right(nullptr) {}
	Node(string ct, string s, string d, int f, int c, int x) : county(ct), state(s), date(d), fips(f), cases(c), deaths(x), BF(0), left(nullptr), right(nullptr) {}
};


struct mapNode //had to make separate node because didn't need pointers
{
    string county;
    string state;
    string date;
    int fips;
    int cases;
    int deaths;

    mapNode(string s, string d, int f, int c, int x): state(s), date(d), fips(f), cases(c), deaths(x){};
};

Node* BSTinsert(Node* root, Node temp);
void mostCasesBST(Node* root, int& max, Node& temp);
void mostDeathsBST(Node* root, int& max, Node& temp);
void totalCasesBST(Node* root, long& total);
void totalDeathsBST(Node* root, int& total);
void searchCountyBST(Node* root, string& County, vector<Node*>& v);
void printCountyBST(vector<Node*>& v);

void readCSVFile(const char* filepath, Node* &root, unordered_map& m);


int main() {
    Node* root = nullptr;

    unordered_map<string, mapNode> covidTracker; //using county as key

    readCSVFile("nameofCSVfile", root, covidTracker);

    bool isRunning = true;
    int choice;
    
    
    while (isRunning) {

        // cout menu of user options
        cout << "Welcome to the COVID-19 case tracker by county. Please choose from the following options." << endl;
        cout << "1. County with most cases\n2. County with most deaths\n"
                "3. Number of cases overall\n4. Number of deaths overall\n"
                "5. Specific county number of cases and deaths\n0. Exit Program" << endl;
        cin >> choice;
        switch (choice) {
        case 0: {
            cout << "Hope you got the information you needed! Stay safe Gator!" << endl;
            isRunning = false;
        }
        case 1: {
	    	int maxBST = 0;
			Node max;
			mostCasesBST(root, maxBST, max);
			cout << max.county << ", " << max.state << ": " << maxBST << endl << endl;
			break;
        }
        case 2: {
            int maxBST = 0;
			Node max;
			mostDeathsBST(root, maxBST, max);
			cout << max.county << ", " << max.state << ": " << maxBST << endl << endl;
			break;
        }
        case 3: {
            long totalBST = 0;
			totalCasesBST(root, totalBST);
			cout << "Total Cases: " << totalBST << endl << endl;
			break;
        }
        case 4: {
            int totalBST = 0;
			totalDeathsBST(root, totalBST);
			cout << "Total Deaths: " << totalBST << endl << endl;
			break;
        }
        case 5: {
            cout << "Insert county name (first letter capitalized)" << endl;
            string countyName;
			cin >> countyName;
			
			vector<Node*> counties;
			searchCountyBST(root, countyName, counties);
			printCountyBST(counties);
			break;
        }
        }

    }

    return 0;
}

void readCSVFile(const char* filepath, Node* &root, unordered_map& m) {
    ifstream file(filepath);
    if (file.is_open()) {
        string lineFromFile;
        getline(file, lineFromFile); //skips that first line
        while (!file.eof()) {
            getline(file, lineFromFile);
            istringstream stream(lineFromFile);
            string dateOfUpdate, County, State, Fips, caseCount, deathCount;
            getline(stream, dateOfUpdate, ',');
            getline(stream, County, ',');
            getline(stream, State, ',');
            getline(stream, Fips, ',');
            getline(stream, caseCount, ',');
            getline(stream, deathCount, ',');

            Node temp;
            temp.date = dateOfUpdate;
            temp.county = County;
            temp.state = State;
            temp.fips = stoi(Fips);
            temp.cases = stoi(caseCount);
            temp.deaths = stoi(deathCount);

            // only need to insert node into data structure
            //insert them into BST and HASH MAP

            root = BSTinsert(root, temp);

            m[County] = mapNode(State, dateOfUpdate, Fips, caseCount, deathCount); //will add or update map string/node pair
        }
    }
}

Node* BSTinsert(Node* root, Node temp) {
	//normal insert of BST
	if (root == nullptr) {
		return new Node(temp.county, temp.state, temp.date, temp.fips, temp.cases, temp.deaths);
	}
	if (temp.fips < root->fips)
		root->left = BSTinsert(root->left, temp);
	else if (temp.fips > root->fips)
		root->right = BSTinsert(root->right, temp);
	else {
		root->cases = temp.cases;
		root->deaths = temp.deaths;
		root->date = temp.date;
		return root;
	}
	return root;
}

void mostCasesBST(Node* root, int& max, Node& temp) {
	if (root == nullptr)
		cout << "";
	else {
		mostCasesBST(root->left, max, temp);
		if (root->cases > max) {
			max = root->cases;
			temp = *root;
		}
		mostCasesBST(root->right, max, temp);
	}
}
void mostDeathsBST(Node* root, int& max, Node& temp) {
	if (root == nullptr)
		cout << "";
	else {
		mostDeathsBST(root->left, max, temp);
		if (root->deaths > max) {
			max = root->deaths;
			temp = *root;
		}
		mostDeathsBST(root->right, max, temp);
	}
}
void totalCasesBST(Node* root, long& total) {
	if (root == nullptr)
		cout << "";
	else {
		totalCasesBST(root->left, total);
		total += root->cases;
		totalCasesBST(root->right, total);
	}
}
void totalDeathsBST(Node* root, int& total) {
	if (root == nullptr)
		cout << "";
	else {
		totalDeathsBST(root->left, total);
		total += root->deaths;
		totalDeathsBST(root->right, total);
	}
}
void searchCountyBST(Node* root, string& County, vector<Node*>& v) {
	if (root == nullptr)
		cout << "";
	else {
		searchCountyBST(root->left, County, v);
		if (root->county == County) {
			v.push_back(root);
		}
		searchCountyBST(root->right, County, v);
	}
}
void printCountyBST(vector<Node*>& v) {
	if (v.empty())
		cout << "No result found" << endl;
	for (int i = 0; i < v.size(); i++) {
		cout << v[i]->date << ": " << v[i]->county << ", " << v[i]->state << endl;
		cout << "Fips: " << v[i]->fips << endl;
		cout << "Cases: " << v[i]->cases << endl;
		cout << "Deaths: " << v[i]->deaths << "\n" << endl;
	}
}
